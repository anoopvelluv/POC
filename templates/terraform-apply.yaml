  jobs:
    - job: terraform_validate_and_apply
      steps:
        - task: TerraformInstaller@0
          displayName: 'Install'
#          inputs:
#            terraformVersion: '${{ parameters.terraform_version }}'

        - task: TerraformTaskV2@2
          displayName: 'Init'
          inputs:
            provider: azurerm
            command: 'init'
            backendServiceArm: '${{ parameters.backendServiceArm }}'
            backendAzureRmResourceGroupName: '${{ parameters.backendAzureRmResourceGroupName }}'
            workingDirectory: '${{ parameters.workingDirectory }}'
            backendAzureRmStorageAccountName: '${{ parameters.backendAzureRmStorageAccountName }}'
            backendAzureRmContainerName: '${{ parameters.backendAzureRmContainerName }}'
            backendAzureRmKey: '${{ parameters.backendAzureRmKey }}'

        - task: TerraformTaskV2@2
          displayName: 'Plan'
          inputs:
            provider: azurerm
            command: 'plan'
            commandOptions: '-var build_id=$(Build.BuildId) -input=false -var-file="../tfvars/${{ parameters.environment }}/${{ parameters.environment }}.tfvars"'
            environmentServiceNameAzureRM: '${{ parameters.backendServiceArm }}'
            workingDirectory: '${{ parameters.workingDirectory }}'

        - task: TerraformTaskV2@2
          displayName: 'Apply'
          condition: succeeded()
          inputs:
            provider: azurerm
            command: 'apply'
            commandOptions: '-var build_id=$(Build.BuildId) -input=false -auto-approve  -var-file="../tfvars/${{ parameters.environment }}/${{ parameters.environment }}.tfvars"'
            environmentServiceNameAzureRM: '${{ parameters.backendServiceArm }}'
            workingDirectory: '${{ parameters.workingDirectory }}'




